---
const { href } = Astro.props
const { pathname } = Astro.url;
---


<li>
    <a href={href} aria-current={pathname === href}>
        <span>
            <slot />
        </span>
        <svg width="100%" height="8px">
            <line x1="0" y1="0" x2="100%" y2="0"/>
        </svg>
    </a>
</li>

<!-- <script define:vars={{href, pathname}}>
    document.addEventListener('click', (clickEvent) => {
        const anchorEl = clickEvent.target.closest('a')
        if (anchorEl===null) {
            return
        }
        const anchorDestination = new URL(anchorEl.href)
        if (anchorDestination.pathname === window.location.pathname && anchorDestination.hash && document.querySelector(anchorDestination.hash)) {
            clickEvent.preventDefault();
            document.querySelector(anchorDestination.hash).scrollIntoView({ 
                behavior: 'smooth' 
            });
        }
    })
</script> -->

<style>
li {
    padding-top: 0;
    padding-bottom: 0;
}
svg {
	position: absolute;
	bottom: 0;
	left: 0;
}

svg line {
	stroke-width: 8;
	stroke: var(--pico-muted-color);
	fill: none;
	stroke-dasharray: 400;
	-webkit-transform: translateX(-400px);
	transform: translateX(-400px);
	-webkit-transition: -webkit-transform .4s ease-out;
	transition: transform .4s ease-out;
}

a:hover svg line {
	-webkit-transform: translateX(0);
	transform: translateX(0);
}

span {
    display: block;
    padding: 0 0 8px 0;
}

a {
    display: block;
    text-align: center;
    text-decoration: none;
	position: relative;
	overflow: hidden;
    font-weight: bold;
    color: var(--pico-muted-color);
    /* font-size: 1.2rem; */
    /* text-transform: uppercase; */
}

a:hover,
a:focus,
a[aria-current=true] {
    color: var(--pico-primary-background);
}
</style>